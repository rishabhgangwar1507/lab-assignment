                               assignment (3) 
(2)using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _2ndquestion
{
    internal class Program
    {
        class MyClassWithPrivateField
        {
            private int myPrivate;

            public MyClassWithPrivateField(int value)
            {
                Console.WriteLine("Enter your value");
                string stringinput = Console.ReadLine();
                myPrivate = int.Parse(stringinput);
            }

            internal int GetPrivateValue()
            {
                return myPrivate;
            }
        }

        class AnotherClass
        {
            public void AccessPrivate()
            {
                MyClassWithPrivateField myObject = new MyClassWithPrivateField(42);
                int privateFieldValue = myObject.GetPrivateValue();
                Console.WriteLine("Accessed private field value: " + privateFieldValue);
            }
        }

        class Pro
        {
            static void Main(string[] args)
            {
                AnotherClass Obj = new AnotherClass();
                Obj.AccessPrivate();
                Console.Read();
            }
        }
    }
}

(1)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace assignment3rd
{
    internal class Program
    {
        class MyClass
        {
            private int myPrivate;

            public void Set_Private_Value(int value)
            {
                myPrivate = value;
            }

            public int Get_Private_Value()
            {
                Console.WriteLine("Enter your value");
                string st = Console.ReadLine();
                myPrivate = int.Parse(st);
                return myPrivate;
            }
        }

        class Pro
        {
            static void Main(string[] args)
            {
                MyClass myObject = new MyClass();

                myObject.Set_Private_Value(42);
                Console.WriteLine("Private value is " + myObject.Get_Private_Value());
                Console.Read();
            }
        }
    }
}

(3)
// internal class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace thirdquestion
{
    internal class internalclass
    {
        internal int x;
        internal void method()
        {
            Console.WriteLine("internal class is accessed");
            Console.WriteLine("internal class variable have value: "+x);
        }
    }
}










//main Class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace thirdquestion
{
    internal class Program
    {
        static void Main(string[] args)
        {
            internalclass inti = new internalclass();
            inti.x = 45;

            Console.WriteLine("Main class got access the other internal class" );
            inti.method();
            Console.Read();
        }
    }
}
(4)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace fourthquestion
{
    class MyBaseClass
    {
        protected int ab;

    protected void MyProtectedMethod()
    {
        Console.WriteLine("MyProtectedMethod from MyBaseClass");
    }
}

class MyDerivedClass : MyBaseClass
{
    public void AccessProtectedMembers()
    {
       ab = 42;
        Console.WriteLine($"Accessed myProtectedField from MyDerivedClass: {ab}");

        MyProtectedMethod();
    }
}

class Program
{
    static void Main(string[] args)
    {
        MyDerivedClass obj = new MyDerivedClass();
        obj.AccessProtectedMembers();
            Console.Read();
    }
}
}
(5)
//internal protected class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace fifthquestion
{
    internal class internalprotected
    {
        internal protected int ab;

        internal void method()
        {
            ab++;
            ab++;
            Console.WriteLine("internal class accessed");
            Console.WriteLine(ab);

        }
    }
}








// main class which accessing internal's protected variable 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace fifthquestion
{
    internal class Program
    {
        static void Main(string[] args)
        {
            internalprotected obj = new internalprotected();
            string x = Console.ReadLine();
            obj.ab=int.Parse(x);
            obj.method();
            Console.Read();
        }
    }
}
(6)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _6thquestion
{
    //Create a class with a public property. Derive another class and try to access the property.

    public class BaseClass
    {

        public string MyProperty { get; set; }
    }


    public class DerivedClass : BaseClass
    {
        public void PropertyAccess()
        {
            Console.WriteLine("Value of MyProperty in the derived class: " + MyProperty);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {

            DerivedClass derivedObj = new DerivedClass();


            derivedObj.MyProperty = "Hello, World!";


            derivedObj.PropertyAccess();

           Console.Read();
        }
    }

}
(7)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _7thqueston
{/// <summary>
/// 7.	Build a class with a private property and provide a public method to modify its value. Test the functionality.
/// </summary>
    class BaseClass
    {
        private int xy; 


        public BaseClass(int initialValue)
        {
            xy = initialValue;
        }


        public void sprivtepro(int newValue)
        {
            xy = newValue;
        }


        public int privtepro()
        {
            return xy;
        }
    }

    internal class Program
    {
        static void Main()
        {

            BaseClass myObject = new BaseClass(42);


            Console.WriteLine("Initial private property value: " + myObject.privtepro());

            myObject.sprivtepro(100);


            Console.WriteLine("Updated private property value: " + myObject.privtepro());
            Console.Read();
        }
    }
}
(8)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _8thqueston
{
    class que
    {

        private void Method1()
        {
            Console.WriteLine("This is a private method.");
        }


        public void Method2()
        {
            Console.WriteLine("This is a public method.");
            Method1(); 
        }
    }

    class Program
    {
        static void Main()
        {

            que Obj = new que();


            Obj.Method2();
            Console.Read();

        }
    }
}
(9)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _9thqueston
{
    class Base
    {
        protected void ProMethod()
        {
            Console.WriteLine("This is a protected method in the base class.");
        }
    }


    class Derived : Base
    {
        public void Access()
        {
            Console.WriteLine("Calling protected method from derived class:");
            ProMethod(); 
        }
    }

    internal class Program
    {
        static void Main()
        {
            Derived dObj = new Derived();
            dObj.Access();
            Console.Read();
        }
    }
}
(10)
//internal cunstructor class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _10question
{
    internal class cunstructor
    {
        private int x;
        internal cunstructor(int a) { 
            this.x = a;
            x++;
            x++;
            Console.WriteLine("internal cunstructor :" + x); 

        }
    }
}







// another assambly to access internal cunstructor class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _10question
{
    internal class Program
    {
        static void Main(string[] args)
        {
            cunstructor inst = new cunstructor (25);
            Console.ReadKey();

        }
    }
}

Assignment (2)
